name: GH-APP-WORKFLOWs



on:
  push:
    tags:
      - v0.0.*
    branches:
      - main
    
  workflow_dispatch:

    # inputs:
    #   IMAGE_NAME:
    #     description: 'The name of the image'
    #     required: true
    #     default: 'my-image'
    #   PEM:
    #     description: 'The private key for the GitHub App'
    #     required: true
    #   APP_ID:
    #     description: 'The ID of the GitHub App'
    #     required: true
    #   INSTALLATION_ID:
    #     description: 'The ID of the GitHub App installation'
    #     required: true
    #   MAIN_BRANCH:
    #     description: 'The main branch of the repository'
    #     required: true
    #     default: 'main'

env:

  IMAGE_NAME: ${{ github.repository }}
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  PEM:
  APP_ID: 938929
  INSTALLATION_ID: 
  MAIN_BRANCH: main




jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # Updated to v3
        with:
          repository: 'IanOliv/state'
          ref: 'src'
          token: ${{ secrets.TOKEN }}
          path: ./state

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        working-directory: ./state
        run: |
          python -m venv venv
          source venv/bin/activate
          # pip install -r requirements.txt
          python --version

      - name: Build and deploy
        working-directory: ./state
        run: |
          # Add your build and deploy commands here
          ls -la
          echo "Build and deploy complete"
      - name: Install GitHub CLI
        run: |
          ls -la
          # Add your build and deploy commands here
          echo "Build and deploy complete"
      # - name: Get GitHub App Installation
      #   id: installation
      #   uses: actions/github-script@v4
      #   with:
      #     github-token: ${{ secrets.TOKEN }}
      #     script: |
      #       const { data: installations } = await github.apps.listInstallations();
      #       const installation = installations.find(installation => installation.app_id === ${{ env.APP_ID }});
      #       console.log(`Installation ID: ${installation.id}`);
      #       console.log(`PEM: ${installation.pem}`);
      #       console.log(`Main Branch: ${{ env.MAIN_BRANCH }}`);
      #       core.setOutput('installation_id', installation.id);
      #       core.setOutput('pem', installation.pem);
      #       core.setOutput('main_branch', ${{ env.MAIN_BRANCH }});