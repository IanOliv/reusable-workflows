name: "Run Composite Action"
description: "A custom action to run a composite action"
inputs:
  token:
    description: "token"
    required: false
    default: ''
  tag-type:
    description: "What type of tag to create"
    required: true
    default: 'patch'

runs:
  using: "composite"
  steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ inputs.TOKEN }}
        # work-directory: ./tags
        fetch-tags: 0
        fetch-depth: 0

    - name: Get the patch tag
      if: ${{ inputs.tag-type == 'patch' }}
      shell: bash
    #   working-directory: ./tags
      id: get_patch_tag
      run: |

        # Get the latest tag
        latest_tag=$(git tag -l | sort -V | tail -n 1 || echo "v0.0.0")

        echo "latest_tag=$latest_tag"


        
        # Split the latest tag into components
        IFS='.' read -r major minor patch <<<"${latest_tag#v}"

        echo "major=$major"
        echo "minor=$minor" 
        echo "patch=$patch" 

        # Increment the patch version
        patch=$((patch + 1))
        echo "patch=$patch" 

        # Create the new tag
        new_tag="v${major}.${minor}.${patch}"
        
        echo "new_tag=$new_tag" >> $GITHUB_ENV
        echo "new_tag=$new_tag"

    - name: Get the minor tag
      shell: bash
      if: ${{ inputs.tag-type == 'minor' }}
    #   working-directory: ./tags
      id: get_minor_tag
      run: |
        # Fetch all tags

        # Get the latest tag or set default
        latest_tag=$(git describe --tags --abbrev=0 || echo "v0.0.0")

        # Split the latest tag into components
        IFS='.' read -r major minor patch <<<"${latest_tag#v}"

        # Increment the minor version and reset patch version
        minor=$((minor + 1))
        patch=0

        # Create the new tag
        new_tag="v${major}.${minor}.${patch}"
        
        echo "new_tag=$new_tag" >> $GITHUB_ENV

    - name: Get the  major tag
      shell: bash
      if: ${{ inputs.tag-type == 'major' }}
    #   working-directory: ./tags
      id: get_major_tag
      run: |


        # Get the latest tag or default to v0.0.0 if no tags exist
        latest_tag=$(git describe --tags --abbrev=0 || echo "v0.0.0")

        # Split the latest tag into components
        IFS='.' read -r major minor patch <<<"${latest_tag#v}"

        # Increment the major version, and reset minor and patch versions
        major=$((major + 1))
        minor=0
        patch=0

        # Create the new tag
        new_tag="v${major}.${minor}.${patch}"
        
        echo "new_tag=$new_tag" >> $GITHUB_ENV




    - name: Tag the commit
      shell: bash
    #   working-directory: ./tags
      run: |
        git tag ${{ env.new_tag }}

    - name: Push the tag
      shell: bash
    #   working-directory: ./tags
      env:
        GITHUB_TOKEN: ${{ inputs.TOKEN }}
      run: |
        git push origin ${{ env.new_tag }}  