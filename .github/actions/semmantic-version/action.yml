name: 'Semmantic Version Action'
description: " This action creates a incremental version tag, set the latest/stable tag and push the tag to the repository "
inputs:
  token:
    description: "token"
    required: false
    default: ''
  tag-type:
    description: "What type of tag to create"
    required: true
    default: 'patch'
branding:
    icon: 'tag'
    color: 'purple'

runs:
  using: "composite"
  steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ inputs.token }}
        # work-directory: ./tags
        fetch-tags: 0
        fetch-depth: 0

    - name: Get the patch tag
      if: ${{ inputs.tag-type == 'patch' }}
      shell: bash
    #   working-directory: ./tags
      id: get_patch_tag
      run: |

        # Get the latest tag
        latest_tag=$(git tag -l | sort -V | tail -n 1 || echo "v0.0.0")

        if [ -z "$latest_tag" ]; then
            latest_tag="v0.0.0"
        fi
        echo "latest_tag=$latest_tag"


        
        # Split the latest tag into components
        IFS='.' read -r major minor patch <<<"${latest_tag#v}"

        echo "major=$major"
        echo "minor=$minor" 
        echo "patch=$patch" 

        # Increment the patch version
        patch=$((patch + 1))
        echo "patch=$patch" 

        # Create the new tag
        new_tag="v${major}.${minor}.${patch}"
        
        echo "new_tag=$new_tag" >> $GITHUB_ENV
        echo "new_tag=$new_tag"

    - name: Get the minor tag
      shell: bash
      if: ${{ inputs.tag-type == 'minor' }}
    #   working-directory: ./tags
      id: get_minor_tag
      run: |
        # Fetch all tags

        # Get the latest tag or set default
        latest_tag=$(git describe --tags --abbrev=0 || echo "v0.0.0")

        # Split the latest tag into components
        IFS='.' read -r major minor patch <<<"${latest_tag#v}"

        # Increment the minor version and reset patch version
        minor=$((minor + 1))
        patch=0

        # Create the new tag
        new_tag="v${major}.${minor}.${patch}"
        
        echo "new_tag=$new_tag" >> $GITHUB_ENV

    - name: Get the  major tag
      shell: bash
      if: ${{ inputs.tag-type == 'major' }}
    #   working-directory: ./tags
      id: get_major_tag
      run: |


        # Get the latest tag or default to v0.0.0 if no tags exist
        latest_tag=$(git describe --tags --abbrev=0 || echo "v0.0.0")

        # Split the latest tag into components
        IFS='.' read -r major minor patch <<<"${latest_tag#v}"

        # Increment the major version, and reset minor and patch versions
        major=$((major + 1))
        minor=0
        patch=0

        # Create the new tag
        new_tag="v${major}.${minor}.${patch}"
        
        echo "new_tag=$new_tag" >> $GITHUB_ENV

    - name: Tag the code to latest 
      shell: bash
      if: ${{ inputs.tag-type == 'patch' || inputs.tag-type == 'minor' || inputs.tag-type == 'major' }}
    #   working-directory: ./tags
      run: |
        git tag ${{ env.new_tag }}
        if git rev-parse latest >/dev/null 2>&1; then
            git tag -d latest
        fi
        git tag latest

    - name: Tag the code to stable 
      if: ${{ inputs.tag-type == 'stable' }}
      shell: bash
    #   working-directory: ./tags
      env:
        GITHUB_TOKEN: ${{ inputs.token }}    
      run: |
        if git rev-parse stable >/dev/null 2>&1; then
            git tag -d stable
        fi
        git tag stable
        git push origin stable --force


    - name: Push the tag
      shell: bash
      if: ${{ inputs.tag-type == 'patch' || inputs.tag-type == 'minor' || inputs.tag-type == 'major'  }}
    #   working-directory: ./tags
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
      run: |
        git push origin ${{ env.new_tag }}  latest